// –ó–∞–¥–∞—á–∞ 1. –î–∞–Ω–æ –∫–ª–∞—Å PhoneNumber. –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ string, –ø—Ä–∏ —è–∫–æ–º—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–º–µ—Ä–∞
// –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä (050‚Ä¶. ü°™ MTC, 096‚Ä¶ ü°™ Kyivstar, ‚Ä¶.)

class PhoneNumber {
    constructor(number) {
        this.number = number
        this.operator = this.operatorSelection()
    }
    operatorSelection() {
        let pattern = /^(\+38)(096|050)\d{7}/
        let match = pattern.exec(this.number)
        if (match !== null) {
            if (match[2] === '096')
                return '–ö–∏—ó–≤—Å—Ç–∞—Ä'
            else
                return '–í–æ–¥–∞—Ñ–æ–Ω'
        }
    }

    [Symbol.toPrimitive](hint) {
        switch (hint) {
            case 'number': return this.number
            case 'string': return this.operator
        }
    }
}

let number = new PhoneNumber('+380962474626')
alert(number)